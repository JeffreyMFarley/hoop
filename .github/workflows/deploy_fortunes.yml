name: Deploy Image - Fortunes

on: workflow_dispatch

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
        FUNCTION_NAME: fortunes_container
        REGION:        us-east-1
        REPO:          fortunes
        SRC_DIR:       ./services/fortunes

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@master

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Prepare
      id: prep
      run: |
        TAG=$(echo $GITHUB_SHA | head -c7)
        REGISTRY=${{ steps.login-ecr.outputs.registry }}
        REPO=${{ env.REPO }}
        echo ::set-output name=tagged_image::${REGISTRY}/${REPO}:${TAG}
        echo ::set-output name=latest_image::${REGISTRY}/${REPO}:latest

    - name: Build image (using cache) and push to AWS ECR
      uses: docker/build-push-action@v2
      with:
        context: ${{ env.SRC_DIR }}
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        tags: ${{ steps.prep.outputs.tagged_image }}, ${{ steps.prep.outputs.latest_image }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    # From this point forward, the action assumes there is a full, running setup

    - name: Update the Lambda function with 'latest'
      # if: github.ref == 'refs/heads/main'
      uses: appleboy/lambda-action@master
      with:
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_region: ${{ env.REGION }}
        function_name: ${{ env.FUNCTION_NAME }}
        image_uri: ${{ steps.prep.outputs.latest_image }}
        publish: true
      continue-on-error: true
